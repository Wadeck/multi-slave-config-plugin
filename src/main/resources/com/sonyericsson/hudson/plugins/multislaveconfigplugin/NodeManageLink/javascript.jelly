<!--
 *  The MIT License
 *
 *  Copyright 2011 Sony Ericsson Mobile Communications. All rights reserved.
 *  Copyright 2014 Sony Mobile Communications AB. All rights reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 *
 -->
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form" xmlns:st="jelly:stapler" xmlns:l="/lib/layout">
    <script type="text/javascript"><![CDATA[
        //Makes it unable to proceed to the configuration page if the slave interval input string is empty.
        //Also does a check to see if mode is "copyFrom". If so checks both intervalString and copyFrom strings
        // and make it unable to proceed if any is empty
        function updateOk(form) {
          function state() {
            var radio = form.elements['mode'];
            if (document.getElementById('slaveName').value.length > 0)
                if (document.getElementById('first').value.length == 0 || document.getElementById('last').value.length == 0)
                    return true;

            if (document.getElementById('slaveName').value.length == 0 && document.getElementById('slaveNames').value.length == 0)
                return true;

            if (document.getElementById('copy').checked) {
                if (document.getElementById('copyFrom').value.length == 0)
                    return true;
            }

            for (i = 0; i < radio.length; i++) {
              if (radio[i].checked) {
                return false;
              }
            }
            return true;
          }
          okButton.set('disabled',state(),false);
        }
        if (typeof okButton != "undefined") { //This button only exists on some pages
            updateOk(okButton.getForm());
        }

        //To lock the input fields on the settingsSelector.jelly page
        //Applied on drop-down lists
        function doToggleList(checkboxId) {
            var name = checkboxId.id.substring(1);
            var entry = checkboxId.name;
            if (!document.getElementById(name).disabled) {
                document.getElementById(name).disabled = true;
                document.getElementById(entry).style.display = 'none';
            } else if (document.getElementById(name).disabled) {
                document.getElementById(name).disabled = false;
                document.getElementById(entry).style.display = 'block';
            }
        }

        //To lock the input fields on the settingsSelector.jelly page
        //Applied on the entries
        function doToggle(checkboxId) {
            var name = checkboxId.name.substring(1);
            if (!document.getElementById(name).disabled) {
                document.getElementById(name).disabled = true;
            }
            else if (document.getElementById(name).disabled) {
                document.getElementById(name).disabled = false;
            }
        }

        //Unchecks all checkboxes
        function unCheckAll() {
            for (i = 0; document.viewerForm.elements.length > i; i++) {
                if (document.viewerForm.elements[i].type == 'checkbox') {
                    document.viewerForm.elements[i].checked = false;
                }
            }
        }
        //Checks all checkboxes
        function checkAll() {
            for (i = 0; document.viewerForm.elements.length > i; i++) {
                if (document.viewerForm.elements[i].type == 'checkbox') {
                    document.viewerForm.elements[i].checked = true;
                }
            }
        }

        //Makes a text box empty
        function makeEmpty(textBox) {
            elements = document.getElementsByName(textBox);
            elements[0].value = "";
        }

        //Makes all text boxes in form[1] on current page empty.
        function makeAllEmpty() {
            var inputArray = document.forms[1].getElementsByTagName("INPUT");
            for (var i = 0; i < inputArray.length; i++) {
                if (inputArray[i].type == 'text') {
                    inputArray[i].value = "";
                }
            }
            updateTable();
        }

        //Sets the buttons for delete to disabled and redirects the user to the confirmation page.
        //To be used when user presses "Yes" when deleting slaves.
        function deleteSlavesRedirect() {
            yesDeleteButton.set('disabled',true,true);
            noDeleteButton.set('disabled',true,true);
            document.location='deleteSlaves';
        }

        //Submits the search parameters to a java class that preforms a search.
        //Listing the result from the search.
        function updateTable() {
            var searchParameters = {
            "name": document.getElementById('name').value,
            "executors": document.getElementById('executors').value,
            "labels": document.getElementById('labels').value,
            "remoteFS": document.getElementById('remoteFS').value,
            "description": document.getElementById('description').value,
            "fullNames": document.getElementById('fullNames').value
            };

            it.doSearch('${sessionId}', searchParameters, function(t) {

                document.getElementById('nbrOfSlaves').innerHTML = 'Listing ' + t.responseObject().length + '\
                  out of ${it.allNodes.size()} registered slaves.<br/>';

                var table = document.getElementById('slaves');
                for (var i = table.rows.length - 1; i > 0; i--) {
                    table.deleteRow(i);
                }
                if (t.responseObject().length == 0) {
                    submitButton.set('disabled', true, false);
                    var tblBody = document.getElementById('slaves').tBodies[0];
                    var newRow = tblBody.insertRow(-1);
                    var checkboxCell = newRow.insertCell(0);
                    newRow.insertCell(1);
                    newRow.insertCell(2);
                    newRow.insertCell(3);
                    newRow.insertCell(4);
                    newRow.insertCell(5);
                    newRow.insertCell(6);
                    checkboxCell.innerHTML = 'Filter resulted in no hits';
                } else {
                    submitButton.set('disabled', false, true);
                    for (var i = 0; i < t.responseObject().length; i++) {
                        var object = t.responseObject()[i];

                        var tblBody = document.getElementById('slaves').tBodies[0];
                        var newRow = tblBody.insertRow(-1);
                        var checkboxCell = newRow.insertCell(0);
                        checkboxCell.innerHTML = '<input json="'+ object.name + '" name="selectedSlaves" class=" " type="checkbox" checked="true">';
                        var statusCell = newRow.insertCell(1);
                        statusCell.innerHTML = '<img src="${imagesURL}/32x32/' + object.icon + '" width="32" height="32" alt="' + object.iconAltText + '"/>';
                        var nameCell = newRow.insertCell(2);
                        nameCell.innerHTML = '<a href="${rootURL}/computer/' + object.name + '" target="_blank">' + object.name + '</a>';


                        var labelsCell = newRow.insertCell(3);
                        if (object.labels != "") {
                            var labelsArray = object.labels.split(" ");
                            for (var j = 0; j < labelsArray.length; j++) {
                                labelsCell.innerHTML += '<a href="${rootURL}/label/' + labelsArray[j] + '" target="_blank">' + labelsArray[j] + '</a>' + " ";
                            }
                        }

                        var executorsCell = newRow.insertCell(4);
                        executorsCell.innerHTML = object.executors;
                        var remoteFS = newRow.insertCell(5);
                        remoteFS.innerHTML = object.remoteFS;
                        var descriptionCell = newRow.insertCell(6);
                        //Sony Ericsson specific replacement for Owned and maintained by:
                        descriptionCell.innerHTML = object.description.replace('Owned and maintained by' , '');
                    }
                }
            })
        }

    ]]></script>
</j:jelly>
